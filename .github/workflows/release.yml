name: Build and Release Stable

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { goos: linux,   goarch: amd64 }
          - { goos: linux,   goarch: arm64 }
          - { goos: linux,   goarch: 386 }
          - { goos: linux,   goarch: arm }
          - { goos: darwin,  goarch: amd64 }
          - { goos: darwin,  goarch: arm64 }
          - { goos: windows, goarch: amd64 }
          - { goos: windows, goarch: arm64 }
          - { goos: windows, goarch: 386 }
          - { goos: freebsd, goarch: amd64 }
          - { goos: openbsd, goarch: amd64 }
          - { goos: netbsd,  goarch: amd64 }

    steps:
      - name: Check commit message (‘stable release’)
        run: |
          MSG="${{ github.event.head_commit.message }}"
          echo "$MSG" | grep -iq 'stable release' || {
            echo "❌ Commit doesn’t contain ‘stable release’ – cancel build"; exit 1; }

      - uses: actions/checkout@v4

      # инициализируем go.mod если его ещё нет
      - name: Init go.mod if absent
        run: |
          if [ ! -f go.mod ]; then
            go mod init backup-redis
          fi

      - uses: actions/setup-go@v5
        with: { go-version: '1.22' }

      - name: Save short commit SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Build ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS:   ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ steps.vars.outputs.sha_short }}
        run: |
          mkdir -p dist
          EXT=""; [ "$GOOS" = "windows" ] && EXT=".exe"
          OUT="backup-redis_${GOOS}_${GOARCH}${EXT}"
          go build -o "dist/$OUT" -ldflags "-s -w -X main.version=$VERSION"

      - uses: actions/upload-artifact@v4
        with: { name: binaries, path: dist/ }

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with: { name: binaries, path: dist/ }

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name:  "Latest Stable Release"
          tag_name: latest
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

